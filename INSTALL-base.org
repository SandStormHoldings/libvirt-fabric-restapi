* how to install the basic libvirt infrastructure
1. install the base dependencies
   - [X] git submodule update --init --recursive :: get the dependencies
   - [X] pip install -r requirements.txt :: install python packages
2. make sure all hosts are acessible via ssh. define the following config files in conf_repo/:
   - [X] mkdir -p conf_repo/{server-confs,dhcpd-confs,restapi-ssh,network} :: create the dir structure
   - [X] ssh-keygen -f conf_repo/id_rsa-host -t rsa -N '' :: create host key
   - [X] ssh-keygen -f conf_repo/id_rsa-virt -t rsa -N '' :: create nodes key
   - [X] cp sample_conf/auth.json conf_repo/ :: customize auth.json for the REST API auth
   - [X] cp -r sample_conf/{server-confs,restapi-ssh,ssh_config,local_config.py} conf_repo/ :: default configs for servers. compatible with ubuntu 14.04,16.04,18.04 
3. [ ] all hypervisors must have id_rsa-host.pub in their /root/.ssh/authorized_keys
4. [ ] fab -R kvm install:1 #run the bare install, initially with apt-get update
5. [ ] /var/lib/libvirt/images/ubuntu-18.04-large.qcow2 :: must have at least one virtual node image on each hypervisor
6. make sure we survive a reboot after rewriting the network configs
   1. fab -R kvm -- reboot
   2. fab -R kvm uptime
7. some notes on minimum requirements for a base linux image
   1. [ ] /root/.ssh/authorized_keys to have id_rsa-virt.pub
8. copy the base virtualization image over to all hosts
   1. cd /usr/local/bin && curl -L -o gdrive 'https://drive.google.com/uc?id=IMGID && chmod +x gdrive
   2. /usr/local/bin/gdrive #execute gdrive initially and follow the instructions to get the token
   3. from the kvm control: scp -r hyperv1:/root/.gdrive conf_repo/gdrive ,
   4. fab -R kvm gdrive_install #and spread it across the machines
   5. fab -R kvm gdrive_get_image:IMGID,ubuntu-8.04-large.qcow2.gz
   6. fab -R kvm -- 'cd /var/lib/libvirt/images && ln -s ubuntu-18.04-large.qcow2 ubuntu-18.04-large.qcow2
9. install some base services.
   1. openvpn
      1. fab -H hyperv1 create_node:openvpn
      2. ('hyperv1', '10.100.40.10', '5.9.34.13'), #openvpn, initially allocated on hyperv1 #allocate a floating ip for this instance on hetzner robot, and assign it in the local_config.py
      3. fab -H hyperv1 setup_network #re-setup the host network once
      4. fab -H hyperv1 configure_node:openvpn #configure the virt machine
      5. possible reasons for virt machine / ext ip  to not go up would be:
	 1. ip r # route to external ip not available on host machine
	 2. ip a # ip not configured on virt machine
	 3. dhcp server not running
      6. fab -H hyperv1 setup_openvpn:openvpn #setup openvpn
      7. create an openvpn user 
   2. fab -H hyperv1 create_node:jumplogs #jump logs aggregation
      1. 
   3. fab -H hyperv1 create_node:jumphost #jump host
      1. fab -H 10.101.40.12 jumphost_user:10.101.40.12:username,~/.ssh/id_rsa.pub # add a user to the jumphost
** disambiguation of config
     - ./ssh_config :: ssh config file describing access and authentication into all of the virtualization hosts
   - ./server-confs/interfaces :: /etc/network/interfaces file to be used by all hosts
   - ./local_config.py :: cluster base configuration. network & host range definitions
   - ./id_rsa-host , ./id_rsa-host.pub :: ssh keys for the hosts
   - ./id_rsa-virt, ./id_rsa-virt.pub :: ssh keys for the virtual machines
